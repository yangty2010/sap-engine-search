<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 
	这里仅扫描标注为@Controller注解的SpringMVC控制类
	 -->
	<context:component-scan base-package="com.neusoft.saca.snap.search.*"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!--
		This tag registers the DefaultAnnotationHandlerMapping and
		AnnotationMethodHandlerAdapter beans that are required for Spring MVC
		to dispatch requests to @Controllers. The tag configures those two
		beans with sensible defaults based on what is present in your
		classpath.
	-->
	<mvc:annotation-driven />

	<!--
		This tag is a shorcut for defining a ParameterizableViewController
		that immediately forwards to a view when invoked. Use it in static
		cases when there is no Java Controller logic to execute before the
		view generates the response.
	-->
	<mvc:view-controller path="/" view-name="index" />
	<mvc:view-controller path="/file/pre" view-name="file/pre" />
	<mvc:view-controller path="/image/pre" view-name="image/pre" />
	<mvc:view-controller path="/avatar/pre" view-name="avatar/pre" />
	<mvc:view-controller path="/attachment/pre" view-name="attachment/pre" />

	<mvc:resources mapping="/style/**" location="/samples/style/" cache-period="31556926" />

	<mvc:default-servlet-handler />
	
	<!-- 启用REST风格接口，并返回JSON格式数据的处理器 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
            	<!-- 注意：这个必须要放在json转换器前面 -->
            	<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <ref bean="jsonConverter"/>
            </list>
        </property>
    </bean>

    <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
        	<list>
        		<value>application/json</value>
        		<value>text/json</value>
        	</list>
        </property>
    </bean>

	<!-- 
		根据请求的文件名或请求的Accept头(MIME类型，在一些协议的消息头中叫做“Content-Type”，使用两部分标识符来确定一个类型)来解析一个视图 。
		ContentNegotiatingViewResolver它本身不解析视图，他是委托其它ViewResolver来解析的。
		默认情况下，它委托的ViewResolver是通过应用程序上下文自动选取的，你也可以通过viewResolvers属性来设置。
	-->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
    	<!-- 不启用，第一步检查URL的后缀名来决定使用何种View -->
    	<property name="favorPathExtension" value="false"/>
    	
    	<!-- 不启用，第二步根据请求参数（默认参数名为format）指定的mediaType来决定使用何种View -->
    	<property name="favorParameter" value="false"/>
    	
    	<!-- 不启用，第三步若没有匹配的mediaTypes属性，但JAF（Java Activation Framework）在启用状态，
    		那么FileTypeMap.getContentType(String)将替代mediaTypes来指定一个媒体类型（Media Type）。 
    	-->
    	
    	<!-- 启用，第四步若前三步都不匹配，且 ignoreAcceptHeader 这个属性为false（默认为false），
    		spring则根据你请求头里面设置的  ContentType 来找适合的 mediaType。 
    	-->
    
        <property name="mediaTypes">
            <map>
                <entry value="application/json" key="json"/>
            </map>
        </property>
        <!-- 
        	一旦确定了请求的媒体类型，这个解析器就这个视图搜寻所有委托的视图解析器（viewResolvers属性指定的），
			并确定这请求的媒体类型是否兼容视图的content type。其中最合适的视图将返回。
         -->
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
                <ref bean="internalResourceViewResolver"/>
            </list>
        </property>
        <!-- 
        	当无法从视图解析器获取一个特定的视图时，将使用这个默认视图。
         -->
        <property name="defaultViews">
            <list>
            	<!-- 返回JSON格式的View -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
            </list>
        </property>
    </bean>
	
	<!-- 全局异常处理器，返回JSON格式的异常信息 -->
	<bean id="exceptionResolver"
		class="com.neusoft.saca.snap.file.exception.SnapJsonHandlerExceptionResolver">
	</bean>

	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<!-- 指定所上传文件的总大小不能超过maxUploadSize（单位是字节）。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize">
			<value>16106127360</value> <!-- 限定附件大小为50M -->
		</property>
		<property name="maxInMemorySize">
			<value>1638400</value>
		</property>
	</bean>

</beans>